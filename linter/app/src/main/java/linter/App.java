/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import org.checkerframework.checker.units.qual.A;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.*;


public class App {


    public static void main(String[] args) {
        Path path = Path.of("app/src/main/resources/gate.js");
        App newApp = new App();
        System.out.println(newApp.linter(path));

    }

    public String mapping(int[][] arr) {

        HashSet<Integer> unique = new HashSet<>();
        HashSet<Integer> temps = new HashSet<>();
        String stringReturned = "";

        int min = arr[0][0];
        int max = arr[0][0];
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                unique.add(arr[i][j]);
                if (arr[i][j] < min)
                    min = arr[i][j];
                if (arr[i][j] > max)
                    max = arr[i][j];
            }
        }

        for (int i = min + 1; i < max; i++) {
            temps.add(i);
        }

        stringReturned = stringReturned + "High: " + max + "Low: " + min;

        for (Integer temp : temps) {
            if (!unique.contains(temp)) {
                stringReturned = stringReturned + "temperature: " + temp;
            }
        }

        return stringReturned;

    }

    public String Tallying(List<String> list) {

        HashMap<Integer,String> result = new HashMap<>();
        int count = 0;
        int keyBig=0;
        for (int index =0;index<votes.size();index++){
            String person = votes.get(index);
            for (int index1 =0;index1<votes.size();index1++){
                if (votes.get(index1)==person){
                    count++;
                }
            }
            result.put(count,person);

            if(count>keyBig){
                keyBig=count;
            }
            count=0;

        }

        System.out.println(result);

        System.out.println();
        String winner = result.get(keyBig) + "  Won";



        return winner;


    }

    public String linter(Path path) {
        int counter = 0;
        StringBuilder error= new StringBuilder();
        try {
            File myFile = new File(path.toUri());
            Scanner scanner = new Scanner(myFile);

            while (scanner.hasNextLine()) {
                counter++;
                String data = scanner.nextLine();
                if (!data.endsWith(";") && !data.endsWith("}") && !data.endsWith("{") && !data.contains("else") && !data.contains("if") && !data.isEmpty() || data.contains("return") && !data.endsWith(";")) {
                    error.append("Line ").append(counter).append(" : Missing semicolon.\n");
                }
            }
            scanner.close();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }


        return error.toString();
    }


}